<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS on Luke&#39;s Blog</title>
    <link>https://Luke2336.github.io/tags/os/</link>
    <description>Recent content in OS on Luke&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Dec 2020 14:40:40 +0800</lastBuildDate><atom:link href="https://Luke2336.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OS CH5 複習</title>
      <link>https://Luke2336.github.io/p/os_ch5/</link>
      <pubDate>Mon, 28 Dec 2020 14:40:40 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/os_ch5/</guid>
      <description>CH5 - Process Synchronization The Critical-Section Problem 有些資源只能同時被一個 process 使用。
do { entry_section(); // critical section  exit_section(); // remainder section while (true);  Mutual Excusion Progress (Freedom from Deadlock) Bounded Wait (Freedom from Starvation)   preemptive: 資源被使用時可以被打斷 non-preemptive  Peterson&amp;rsquo;s Solution class PetersonLock { // shared var.  bool flag[2]; int victim; public: void lock() { int i = ThreadID.get(); int j = 1 - i; flag[i] = true; victim = i; while (flag[j] &amp;amp;&amp;amp; victim == i); } void unlock() { int i = ThreadID.</description>
    </item>
    
    <item>
      <title>2020/12/02 日記</title>
      <link>https://Luke2336.github.io/p/20201202/</link>
      <pubDate>Wed, 02 Dec 2020 10:58:23 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/20201202/</guid>
      <description>OS HW1 (Python) 中午研究了一下 OS 的作業一，因為對 Python 還不熟，所以先研究了一些模組和函式的用法。之後再慢慢研究 Multithread、Multiprocessing 和 Coroutine。因為期中考表現的很糟，希望能在作業拚一下，把總成績拉到 A。
Requests: Website Title  $ pip3 install requests $ pip3 install beautifulsoup4  1import requests 2from bs4 import BeautifulSoup 3url = input() 4r = requests.get(url) 5while r.status_code != requests.codes.ok : # 200 6	r = requests.get(url) 7soup = BeautifulSoup(r.text, &amp;#39;html.parser&amp;#39;) 8print(soup.find(&amp;#39;title&amp;#39;).text) SHA 記得要先 encode(&#39;utf-8&#39;)
1import hashlib # 內建的 2 3def SHA256(s): 4 sha = hashlib.sha256() 5 sha.update(s.encode(&amp;#39;utf-8&amp;#39;)) 6 return sha.</description>
    </item>
    
  </channel>
</rss>
