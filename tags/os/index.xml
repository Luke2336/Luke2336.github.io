<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS on Luke&#39;s Blog</title>
    <link>https://luke2336.github.io/tags/os/</link>
    <description>Recent content in OS on Luke&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Mar 2022 18:49:31 +0800</lastBuildDate><atom:link href="https://luke2336.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>實作 lsof</title>
      <link>https://luke2336.github.io/p/lsof/</link>
      <pubDate>Fri, 18 Mar 2022 18:49:31 +0800</pubDate>
      
      <guid>https://luke2336.github.io/p/lsof/</guid>
      <description>這篇是用來記錄 UNIX hw1 的實作坑。 實作時可能會因為不是 root 權限，而需要輸出 permission denied。 這份功課有點吃字串處理技巧。  Goal COMMAND PID USER FD TYPE NODE NAME
PID  先從 /proc 裡面撈出所有的 pid，然後再針對每個 pid 去撈剩下的資訊。  Command  從 /proc/[pid]/comm 讀寫。  User、UID  每個 pid 資料夾中的 user 都相同，於是只要用 stat() 去找 /proc/[pid] 的 st_uid 就行了，然後從 /etc/passwd 撈出對應的 username。  FD 分成以下幾種：
cwd  從 proc/[pid]/cwd 裡找，因為是 symbolic link，所以用 readlink() 讀出連接的檔名。  rtd  從 proc/[pid]/root 裡找，然後一樣用 readlink()。  txt  從 /proc/[pid]/exe 裡找，然後一樣用 readlink()。  mem  讀 /proc/[pid]/maps。  [0-9]+[rwu] 從 /proc/[pid]/fdinfo/[fd] 裡讀取 flag，然後用 &amp;amp; O_O_ACCMODE 去區分是讀或寫。</description>
    </item>
    
    <item>
      <title>MacOS Command Line Note</title>
      <link>https://luke2336.github.io/p/mac_cmd/</link>
      <pubDate>Sun, 07 Feb 2021 14:08:22 +0800</pubDate>
      
      <guid>https://luke2336.github.io/p/mac_cmd/</guid>
      <description>常用指令    command 用途     clear clear terminal window   ls list directory content   ls -a 將隱藏檔案也列出   cd change directory to home   cd .. change directory to parent   cd - change directory to last working directory   cd / change directory to root   pwd print working directory   rm file_name remove file   mkdir dir_name make directory   rmdir dir_name remove directory   rm -R dir_name remove the directory and all files in the directory   cp -R A B 將 A 資料夾的東西全部複製到 B   mv A dir_name 將 A 搬到資料夾   cat file_name 查看內容   grep text file_name 抓取內容    </description>
    </item>
    
    <item>
      <title>OS CH5 複習</title>
      <link>https://luke2336.github.io/p/os_ch5/</link>
      <pubDate>Mon, 28 Dec 2020 14:40:40 +0800</pubDate>
      
      <guid>https://luke2336.github.io/p/os_ch5/</guid>
      <description>CH5 - Process Synchronization The Critical-Section Problem 有些資源只能同時被一個 process 使用。
do { entry_section(); // critical section  exit_section(); // remainder section while (true);  Mutual Excusion Progress (Freedom from Deadlock) Bounded Wait (Freedom from Starvation)   preemptive: 資源被使用時可以被打斷 non-preemptive  Peterson&amp;rsquo;s Solution class PetersonLock { // shared var.  bool flag[2]; int victim; public: void lock() { int i = ThreadID.get(); int j = 1 - i; flag[i] = true; victim = i; while (flag[j] &amp;amp;&amp;amp; victim == i); } void unlock() { int i = ThreadID.</description>
    </item>
    
  </channel>
</rss>
