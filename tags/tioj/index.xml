<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIOJ on Luke&#39;s Blog</title>
    <link>https://luke2336.github.io/tags/tioj/</link>
    <description>Recent content in TIOJ on Luke&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Feb 2021 20:36:05 +0800</lastBuildDate><atom:link href="https://luke2336.github.io/tags/tioj/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIOJ 1214 樹同構</title>
      <link>https://luke2336.github.io/p/tioj1214/</link>
      <pubDate>Mon, 08 Feb 2021 20:36:05 +0800</pubDate>
      
      <guid>https://luke2336.github.io/p/tioj1214/</guid>
      <description>ICPC 2020 Taipei 出了一題水母圖的同構，於是今天找了這題樹同構練習，採用括號字串的方法，而不是 Hashing。
 水母圖  對於環上每個點當 root 去生出樹字串。 串接起來後，用環狀字串的演算法去比較。    TIOJ 1214 - 樹論 之 樹同構測試 $$O(|G|^2 \log \Delta(G)) = O(n^2 \log n)$$
 n ≤ 100。給定兩棵樹的邊，問他們是否同構 &amp;ldquo;isomorphic&amp;rdquo; 先 DFS 找出所有的樹重心（最多 2 個）。樹重心的定義為，最大子樹大小最小的點。 從重心開始做 DFS，將每個點用 () 表示，中間夾括入他所有子樹字串，將他們排序後加入。每次排序為度數個，所以總共需要排序 deg - 1 個，所有點加起來為 n 個，再乘上字串比較的複雜度 O(n)。 最後再將重心們的字串排序後串接，比較兩棵樹是否相同。  1#pragma GCC optimization (&amp;#34;O3&amp;#34;) 2#include&amp;lt;bits/stdc++.h&amp;gt;3using namespace std; 4#define pb push_back 5int n; 6int dfs(int u, int p, int &amp;amp;mi, vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; &amp;amp;G, vector&amp;lt;int&amp;gt; &amp;amp;ret) { 7 int cnt = 0, mx = 0; 8 for (int uu : G[u]) { 9 if (uu == p) continue; 10 int r = dfs(uu, u, mi, G, ret); 11 mx = max(mx, r), cnt += r; 12 } 13 mx = max(mx, n - cnt - 1); 14 if (mx &amp;lt;= mi) { 15 if (mx &amp;lt; mi) ret.</description>
    </item>
    
  </channel>
</rss>
