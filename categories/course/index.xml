<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course on Luke&#39;s Blog</title>
    <link>https://Luke2336.github.io/categories/course/</link>
    <description>Recent content in Course on Luke&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jun 2021 11:00:15 +0800</lastBuildDate><atom:link href="https://Luke2336.github.io/categories/course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>交大修課心得</title>
      <link>https://Luke2336.github.io/p/course_nctu/</link>
      <pubDate>Sun, 27 Jun 2021 11:00:15 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/course_nctu/</guid>
      <description>目錄 這邊的分類不代表開課系所，只是用課的性質去歸納。
 物理  物理（一）、（二） 物理實驗（一）、（二）   數學  微積分甲（一）、（二） 離散數學 線性代數 微分方程 訊號與系統 機率   資工  程式  計算機概論與程式設計 物件導向與資料結構 基礎程式設計（GPE）   硬體、底層  數位電路設計 數位電路實驗 計算機組織 作業系統概論   計算理論  基礎圖論 演算法概論 隨機演算法 高等演算法 正規語言概論   其他選修  競技程式設計（一）、(二)、（三） 人工智慧概論 資料庫系統概論 計算方法之實務應用     電機、電子  電子學（一） 電子實驗（一） 電路學 電子設計自動化演算法與實作   通識  校基本  疾病知識與防治 幾何造型 統計方法與資料分析 認識語言   跨院  統計學   核心  政治學 教育學概論     外文  大一英文（一） 德文（一） 德文（二） 進階英文寫作    修課建議  微積分 → 微分方程、訊號與系統 → 電路學、電子學 → 電子實驗</description>
    </item>
    
    <item>
      <title>大學是不是職業訓練所？</title>
      <link>https://Luke2336.github.io/p/pedagogy-report/</link>
      <pubDate>Wed, 14 Apr 2021 19:25:34 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/pedagogy-report/</guid>
      <description>以下是我寫的教育學概論期中報告，想說既然寫了，也順便放上來。
這次作業有兩種選項，一種是寫參考書籍的閱讀報告，另一種是寫「我所關心的教育議題」，我選了後者撰寫。字數限制是 2000~2500 字，我寫了 2100 字。
因為是通識報告，所以寫的時候並不想只針對自己的科系去舉例，但最後還是有點針對電機資訊相關科系。寫這份報告除了是作業以外，也是在認真思考為什麼現在的制度，大部分的人都有所抱怨。
這個標題是參考之前網路新聞的標題。
 大學是不是職業訓練所？ 在資工系，我常常聽到同學們抱怨說，「線性代數、微積分、自動機語言等數學課對於未來沒有太大的幫助」「作業都是手寫證明導致就業時都拿不出像樣的作品集」「讀大學只是為了學歷，平常應該多接 case和做 side project，不應該把時間花在考試和寫作業」。這些言論讓我開始思考了一個問題「工程學院只是為了培養業界需要的工程師嗎？」而這個問題可以延伸到「大學是不是職業訓練所？」以及「大學能不能作為職業訓練所？」
如果以政治學的角度來看，「大學等同職業訓練所」誰可以獲利，很明顯的，業界能將訓練員工的成本轉嫁到所有納稅人身上，也能更方便的挑選需要的員工；而利益損失的則有學界以及想往學界發展的學生。由這個角度，我想探討究竟是什麼原因讓台灣的大學漸漸變得像職業訓練所，還有我認為哪些是大學應提供的基本能力及大學的社會責任。
首先，誰真正決定了大學的走向？我認為既不是政府，也不是企業家，而是填志願的學生。像是醫藥、電機、資工、法律等第一志願，都是學生們以就業後的薪水做考量做出的決定，像是數學、哲學、中文、社會學等系，則基於出路的原因較不受歡迎，由此可見，多數人認為大學的科系和未來就業的選擇高度相關。
再者，為什麼高等教育無法和技職教育獨立並行呢？我認為這受到台灣的社會觀念影響，受過大學、碩士教育的薪水普遍較高，導致多數人認為唸大學是必須的。當大學生們普遍為了文憑而唸大學時，大學就需要去最大化所有大學生的利益，也就是它需要去維護文憑的價值。文憑價值的評量又牽扯到了企業對於那間大學人才的評量，因此最後導致大學需要培養企業需要的人才。
我認為這會導致一些嚴重的教育議題，大學的課程都是為了培養企業所需的人才而設計的，而不是為了讓學生有獨立思考、發現問題、解決問題等能力，那再過幾代，是不是研究會漸漸枯竭，技術會達到極限，或是沒有足夠多的人才被培養成能傳播知識的人。那假設產業結構出現變化，其他產業興起，過去培養的人是不是都無能去跟上時代呢？
除此之外，我常聽到同學們抱怨說「學校在教的技術早就退流行了，完全派不上用場」。是的，假若學校都是在教技術，而不是創造技術的基本功或是基礎推理能力，學生們無法舉一反三，那他們學到的知識就永遠停留在他們的二十歲，但他們的下半輩子顯然不能只靠那些知識生活，因此培養自學能力是必須的，像是如何尋找需要的資料，如何檢驗資料的正確性，如何將已經會的知識應用在遇到的問題上，這些都是我認為大學應該培養的技能。
綜合以上幾點後，我們可以思考，對於只渴望學習就業相關技術的人，大學能帶給他哪些文憑以外的收穫，是否能透過在業界的實務經驗來達到更有效率的學習。以下，我想說明大學其實並不是一個好的職業訓練環境。
仔細檢視我們的大學制度，假設要四年畢業，一個學期需要修 16 學分，而對於每一個學分，上課、複習、寫作業的時間，平均需要花三小時，再加上體育課或導師時間等零學分的課程，少說一週要花 50 小時上課和讀書，也就是平均一天要花到 8 小時。但請注意到，以上僅僅是完成基本的教師要求，也就是根本就沒有多餘的時間，去針對自己有興趣的部分深入的研究。因此，期待大學生有自主學習甚至研究的能力，其實是不可能的。另外，以大學部的課程來說，扣掉加退選、考試，一門三學分的課，實際一學期也就 45 小時，是無法培養學生的實務能力的。舉例來說，以程式設計課程為例，教師往往是出作業，然後讓學生回去做，然後交完作業後，並不會告訴學生可以怎樣改進等等。反之，在業界，員工只需要專研他負責的部分，而能體驗完整去將一個主題做到最優的情況，不是像在學校裡，必須去最大化所有科目的分數總和，而犧牲了試著去將學習做到最好的機會。在業界，實務的成果也是會受到客戶較多檢驗及要求的，能實際理解怎樣的能力是業界真正需要的。
總結上段所敘述的幾點，我認為大學中的學習，對於只是想要在業界生存的人其實是沒效率的，他想在大學中獲得的技術，在業界能更有效率地取得並檢驗學習成果。因此，這些人與其抱怨，xx課是他們未來工作不需要學習的，不如說，他們對大學本身的期待是不切實際的，大學不應該被期待是個好的職業訓練所。
最後，我想提出幾點在大學制度中，受到「職業訓練」這個概念影響的缺陷。首先，我認為「必修學分」這個制度其實是可以被討論的，當我詢問系上教授我們為何需要修必修時，他給我的回應是，xx系畢業的學生應該得學會這些。其實，反過來想，為什麼我們是強制規定學生要會這些東西，而不是讓他們去探索他們想要的生涯規劃中，他們需要哪些能力，需要如何安排自己的學習。第二點，很多科系設定「實習」為必修學分，我認為這個本意是好的，但實務上並沒有好的配套措施，像是實習生為了學分被資方剝削的新聞層出不窮，實際上沒得到學習，而只是被當作廉價勞力的新聞層出不窮。
總結我對大學與職業教育的看法，我認為大部分的大學科系不應該和職業訓練綁定，大學應該是教導學生學習的能力，由企業給予員工職業的訓練，這樣能讓人們獲得更有效率的學習，也不會被一些東拼西湊的政策影響，造成不管是想走學術或是想去業界的學生，都被強迫學習自己無興趣的東西，或是無時間學習自己更有興趣的東西，讓課堂的學習品質上升，使得教育資源能得發揮最大效益。</description>
    </item>
    
    <item>
      <title>正規語言 Lec 5 筆記</title>
      <link>https://Luke2336.github.io/p/fl5/</link>
      <pubDate>Fri, 02 Apr 2021 11:43:34 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/fl5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>電路學第 14 章</title>
      <link>https://Luke2336.github.io/p/circuit_ch14/</link>
      <pubDate>Wed, 30 Dec 2020 15:29:08 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/circuit_ch14/</guid>
      <description>CH14 這章用 Frequency Domain 來討論電路學，主要的重點有以下幾個：
 Frequency &amp;amp; Magnitude Responce Bode Plots Resonance, Half-Power Freq., Quality Factor Filter: Lowpass, Highpass, Bandpass, Bandstop Magnitude &amp;amp; Frequency Scaling  </description>
    </item>
    
    <item>
      <title>OS CH5 複習</title>
      <link>https://Luke2336.github.io/p/os_ch5/</link>
      <pubDate>Mon, 28 Dec 2020 14:40:40 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/os_ch5/</guid>
      <description>CH5 - Process Synchronization The Critical-Section Problem 有些資源只能同時被一個 process 使用。
do { entry_section(); // critical section  exit_section(); // remainder section while (true);  Mutual Excusion Progress (Freedom from Deadlock) Bounded Wait (Freedom from Starvation)   preemptive: 資源被使用時可以被打斷 non-preemptive  Peterson&amp;rsquo;s Solution class PetersonLock { // shared var.  bool flag[2]; int victim; public: void lock() { int i = ThreadID.get(); int j = 1 - i; flag[i] = true; victim = i; while (flag[j] &amp;amp;&amp;amp; victim == i); } void unlock() { int i = ThreadID.</description>
    </item>
    
    <item>
      <title>德文（一）筆記</title>
      <link>https://Luke2336.github.io/p/german1/</link>
      <pubDate>Mon, 28 Dec 2020 10:19:18 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/german1/</guid>
      <description>方向 / 方位    中文 German     上 über   下 unter   左 links   右 rechts       中文 German     東 der Osten   西 der Westen   南 der Süden   北 der Norden     Berlin liegt im Osten von Deutschland. in die Mitte  數字用法    Zahlen German Zahlen German Zahlen German     0 null 10 zehn 20 zwanzig   1 eins 11 elf 21 einundzwanzig   2 zwei 12 zwölf     3 drei 13 dreizehn     4 vier 14 vierzehn     5 fünf 15 fünfzehn     6 sechs 16 sechzehn     7 sieben 17 siebzehn     8 acht 18 achtzehn     9 neun 19 neunzehn         Zahlen German     20 zwanzig   30 dreißig   40 vierzig   50 fünfzig   60 sechzig   70 siebzig   100 (ein)hundert   101 hunderteins   1.</description>
    </item>
    
    <item>
      <title>認識語言 期末報告</title>
      <link>https://Luke2336.github.io/p/understanding_language_final_report/</link>
      <pubDate>Mon, 28 Dec 2020 10:09:29 +0800</pubDate>
      
      <guid>https://Luke2336.github.io/p/understanding_language_final_report/</guid>
      <description>「認識語言」期末報告 以下介紹五個我在「認識語言」下半學期學到的重點。
1. Chomsky 和行為主義 (Behaviorism) 的對立 語言的學習是後天的 (nurutre)，還是天生就有的 (nuture) 學習能力？
行為主義興起的背景，要從佛洛伊德的時代開始談起，當時心理學是立足於潛意識等無法觀測的東西，因此很多科學家無法認同心理學屬於科學的一支。
在 Parlov、Skinner 和 Waston 等人的努力下，產生了行為主義學派。他們透過設計實驗來研究人或動物的行為模式，像是古典制約的實驗中，Parlov 的狗被制約，每次接收到搖鈴刺激 (stimulus)，就會不由自主的流口水。而 Skinner 進一步提出了操作制約，透過食物來讓老鼠自己學會按開關。
行為主義者宣稱，他們可透過制約，也就是給予 positive/negative reforcement，使人類學習，這屬於 stimulus-response learning。他們認為母語的學習也可以透過同樣的管道。
對此，Chomsky 有不同的看法，他認為語言的習得無法僅僅透過後天的經驗，先天的能力是必須的，因此他提出了 Universal Grammar。&amp;ldquo;What you know exceeds what you were taught.&amp;quot;，舉例來說，小孩子會犯一些大人不會犯的錯誤，像是 &amp;ldquo;holded&amp;rdquo;，這是他們無法透過模仿習得，可以推論出他們先天具備一些學習語言的能力，像是統計、歸納等等。
Chomsky 說明了在語言的學習上，本能和經驗都是重要的。我認為他的想法是重要且具有突破性的，因為他不只影響了語言學的發展，更對心理學造成了重大的影響，他證明了行為主義是無法解釋所有現象的，讓心理學研究慢慢走出行為主義的框架。
2. Universal Grammar (UG) Universal Grammar 是 Chomsky 的理論，為了描述所有語言的共同點。Universal Grammar 是由 principles 和 parameters 共同組成。
由於孩童學習語言的時間是有限的，且他們能得到的資訊量也是有限的，但他們能表達的語句，卻是無限的。可見，這些語句不僅僅是藉由經驗而習得，而需要藉由人類天生就有的 Universal Grammar，將得到的句子提取出一些共通的 principles。像是人們能判斷句子中的代名詞或是反身代名詞是在指誰，都是我們在學習時無法直接解釋的，這些天生就具備的能力，就是屬於 Universal Grammar。
但這些 principles 卻只能解釋語言具有共通性，而無法解釋語言的差異性，因此他在理論中加入了 parameters 的想法。
在英語中，是先表達動詞，然後才是受詞。然而，在日語中，兩者卻是相反的。又或是在英文中，我們會將 Where/Who 等疑問詞放在句子開頭，而在中文中，我們卻會任意擺放哪裡/誰/何時在句子的其他位置。這些現象無法被 principles 概括，因此我們有了 parameters。parameters 提供了孩童在學習時，能藉由聽到的資訊，將母語中沒有的 parameters 捨棄，讓他們能專注於學習母語中有的文法或發音。</description>
    </item>
    
  </channel>
</rss>
